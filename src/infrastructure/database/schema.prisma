generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id               String          @id @default(uuid())
  email            String          @unique
  password         String?
  firstName        String?
  lastName         String?
  city             String?
  state            String?
  cpf              String?         @unique
  role             Role            @default(USER)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  name             String?
  image            String?
  emailVerified    DateTime?
  resetToken       String?
  resetTokenExpiry DateTime?
  accounts         Account[]
  auditLogs        AuditLog[]
  billingAccount   BillingAccount?
  sessions         Session[]

  @@index([role])
  @@index([createdAt])
  @@index([resetToken])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@index([provider])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expires])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

/// Modelo para expansão futura de cobrança (billing)
model BillingAccount {
  id         String    @id @default(uuid())
  userId     String    @unique
  externalId String?
  plan       String?
  status     String?
  expiresAt  DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

/// Tabela de auditoria e logging de eventos de autenticação e segurança
model AuditLog {
  id        String   @id @default(uuid())
  userId    String?
  eventType String
  ip        String?
  userAgent String?
  timestamp DateTime @default(now())
  details   Json?
  user      User?    @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([eventType])
  @@index([timestamp])
}

enum Role {
  USER
  ADMIN
}
