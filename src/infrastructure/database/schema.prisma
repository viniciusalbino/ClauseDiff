// Prisma schema for ClauseDiff authentication system
// User model with required and optional fields for robust authentication

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id         String   @id @default(uuid())
  email      String   @unique
  password   String
  firstName  String
  lastName   String
  city       String?  // optional
  state      String?  // optional
  cpf        String?  @unique // optional, unique if provided
  role       Role     @default(USER)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  accounts   Account[]
  sessions   Session[]
  billingAccount BillingAccount?
  auditLogs  AuditLog[]
  // Relations to accounts, sessions, tokens will be added in next sub-tasks
  @@index([role])
  @@index([createdAt])
}

enum Role {
  USER
  ADMIN
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  
  access_token       String?  
  expires_at         Int?     
  token_type         String?  
  scope              String?  
  id_token           String?  
  session_state      String?  
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId])
  @@index([provider])
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId])
  @@index([expires])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires   DateTime

  @@unique([identifier, token])
}

/// Modelo para expansão futura de cobrança (billing)
model BillingAccount {
  id            String   @id @default(uuid())
  userId        String   @unique
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  // Para integração futura com gateways de pagamento (ex: Stripe, MercadoPago)
  externalId    String?  // ID do cliente no gateway de pagamento
  plan          String?  // Nome ou código do plano de assinatura
  status        String?  // Status da assinatura (ativo, cancelado, trial, etc)
  expiresAt     DateTime? // Data de expiração da assinatura
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  // Adicione outros campos conforme necessário para billing
}

/// Tabela de auditoria e logging de eventos de autenticação e segurança
model AuditLog {
  id         String   @id @default(uuid())
  userId     String?
  user       User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  eventType  String   // Ex: login, logout, failed_login, password_change, etc
  ip         String?
  userAgent  String?
  timestamp  DateTime @default(now())
  details    Json?
  // Adicione outros campos conforme necessário
  @@index([userId])
  @@index([eventType])
  @@index([timestamp])
} 