name: 🧪 Comprehensive Testing Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch: # Allow manual triggers

env:
  NODE_VERSION: 18.x
  CI: true

jobs:
  # Job 1: Code Quality and Linting
  code-quality:
    name: 🔍 Code Quality & Linting
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: 📦 Checkout Repository
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install Dependencies
        run: npm ci

      - name: 🔍 Run ESLint
        run: npm run lint --if-present

      - name: 🎯 Check TypeScript Types
        run: npx tsc --noEmit

  # Job 2: Unit Tests with Coverage
  unit-tests:
    name: 🧪 Unit Tests & Coverage
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
        
    steps:
      - name: 📦 Checkout Repository
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: 📥 Install Dependencies
        run: npm ci

      - name: 🧪 Run Unit Tests with Coverage
        run: npm test -- --coverage --testPathIgnorePatterns="cypress|e2e" --passWithNoTests

      - name: 📊 Upload Coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unit-tests
          name: codecov-unit-${{ matrix.node-version }}
          fail_ci_if_error: false

      - name: 📈 Coverage Quality Gate
        run: |
          COVERAGE=$(npm test -- --coverage --testPathIgnorePatterns="cypress|e2e" --passWithNoTests --silent | grep -o "All files.*[0-9]\+\.[0-9]\+" | grep -o "[0-9]\+\.[0-9]\+" | head -1)
          echo "Current coverage: $COVERAGE%"
          if (( $(echo "$COVERAGE < 70" | bc -l) )); then
            echo "❌ Coverage $COVERAGE% is below 70% threshold"
            exit 1
          else
            echo "✅ Coverage $COVERAGE% meets the 70% threshold"
          fi

  # Job 3: Integration Tests
  integration-tests:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
      - name: 📦 Checkout Repository
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install Dependencies
        run: npm ci

      - name: 🔗 Run Integration Tests
        run: npm test -- --testPathPatterns="integration" --passWithNoTests

      - name: 📊 Upload Integration Test Results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: integration-test-results
          path: |
            coverage/
            test-results/
          retention-days: 7

  # Job 4: Security Tests
  security-tests:
    name: 🔒 Security Testing
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: 📦 Checkout Repository
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install Dependencies
        run: npm ci

      - name: 🔒 Run Security Tests
        run: npm test -- --testPathPatterns="security" --passWithNoTests

      - name: 🛡️ Run npm audit
        run: npm audit --audit-level=high

      - name: 📋 Security Test Report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: security-test-results
          path: |
            coverage/
            security-results/
          retention-days: 7

  # Job 5: E2E Tests with Cypress
  e2e-tests:
    name: 🎭 E2E Tests (Cypress)
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    strategy:
      matrix:
        browser: [chrome, firefox]
        
    steps:
      - name: 📦 Checkout Repository
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install Dependencies
        run: npm ci

      - name: 🏗️ Build Application
        run: npm run build

      - name: 🎭 Run Cypress E2E Tests
        uses: cypress-io/github-action@v6
        with:
          start: npm start
          wait-on: 'http://localhost:3000'
          wait-on-timeout: 120
          browser: ${{ matrix.browser }}
          record: false

      - name: 📸 Upload Cypress Screenshots
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: cypress-screenshots-${{ matrix.browser }}
          path: cypress/screenshots
          retention-days: 7

      - name: 🎥 Upload Cypress Videos
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: cypress-videos-${{ matrix.browser }}
          path: cypress/videos
          retention-days: 7

  # Job 6: Performance Testing
  performance-tests:
    name: ⚡ Performance Testing
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: 📦 Checkout Repository
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install Dependencies
        run: npm ci

      - name: 🏗️ Build Application
        run: npm run build

      - name: ⚡ Run Performance Tests
        run: |
          echo "🚀 Starting performance tests..."
          # Add your performance testing commands here
          # Example: lighthouse-ci, bundle analyzer, etc.
          echo "⚡ Performance tests completed"

      - name: 📊 Performance Report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: |
            lighthouse-results/
            bundle-analysis/
          retention-days: 7

  # Job 7: Test Results Summary
  test-summary:
    name: 📋 Test Results Summary
    runs-on: ubuntu-latest
    needs: [code-quality, unit-tests, integration-tests, security-tests, e2e-tests, performance-tests]
    if: always()
    timeout-minutes: 5
    
    steps:
      - name: 📦 Checkout Repository
        uses: actions/checkout@v4

      - name: 📊 Download All Artifacts
        uses: actions/download-artifact@v3

      - name: 📋 Generate Test Summary
        run: |
          echo "# 🧪 Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Job Status Overview" >> $GITHUB_STEP_SUMMARY
          echo "- Code Quality: ${{ needs.code-quality.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Unit Tests: ${{ needs.unit-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Integration Tests: ${{ needs.integration-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Security Tests: ${{ needs.security-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- E2E Tests: ${{ needs.e2e-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Performance Tests: ${{ needs.performance-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📊 Coverage and Quality Metrics" >> $GITHUB_STEP_SUMMARY
          echo "- Target Coverage: 70%+" >> $GITHUB_STEP_SUMMARY
          echo "- Security Scan: Completed" >> $GITHUB_STEP_SUMMARY
          echo "- Cross-browser Testing: Chrome & Firefox" >> $GITHUB_STEP_SUMMARY

      - name: ❌ Fail if Critical Tests Failed
        if: needs.unit-tests.result == 'failure' || needs.security-tests.result == 'failure'
        run: |
          echo "❌ Critical tests failed. Failing the workflow."
          exit 1

      - name: ✅ All Tests Passed
        if: needs.code-quality.result == 'success' && needs.unit-tests.result == 'success' && needs.integration-tests.result == 'success' && needs.security-tests.result == 'success'
        run: |
          echo "🎉 All critical tests passed successfully!" 